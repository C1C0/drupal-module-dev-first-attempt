<?php

/**
 * @file
 * Enables a single-user blog.
 */

define('SINGLE_BLOG_NODE_TYPE', 'article');
define('SINGLE_BLOG_LIST_COUNT', 5);
define('SINGLE_BLOG_DATE_FORMAT', 'F d, Y');

/**
 * Returns a list of blog entries
 * 
 * @param $number
 *   The number of blog entries to return.
 * @return
 *   A result set object containing the list of blog entries
 */
function single_blog_list($number)
{
    //it is considered the bad practice to write it in the hook_block_view()
    $query = db_select('node', 'n')
        ->fields('n', ['nid', 'title', 'created', 'uid'])
        ->condition('type', SINGLE_BLOG_NODE_TYPE)
        ->condition('status', 1)
        ->orderBy('created', 'DESC')
        ->range(0, $number)
        ->addTag('node_access')
        ->execute();

    return $query;
}

/**
 * Implements hook_block_info().
 */
function single_blog_block_info()
{
    $blocks = [];

    //The array key defines the $delta parameter used in all toher block hooks
    $blocks['recent'] = [
        //the name of the block on the blocks administration page
        'info' => t('Recent blog posts'),
    ];

    return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Third draft!
 * 
 * @param $delta
 *   The name of the requested block.
 */
function single_blog_block_view($delta = '')
{
    //create an empty block.
    $block = [
        'subject' => '',
        'content' => [],
    ];

    //check which block is being requested
    if ($delta == 'recent') {
        //set the block title.
        $block['subject'] = t('Recent blog posts');

        //check if eht user can access content.
        if (user_access('access content')) {
            //retrieve the most recent nodes
            $result = single_blog_list(SINGLE_BLOG_LIST_COUNT);

            //create links for each blog entry.
            $items = [];
            foreach ($result as $node) {
                $items[] = [
                    'data' => [
                        '#theme' => 'single_blog_block_item',
                        '#node' => $node,
                    ],
                    'class' => ['node-' . $node->nid],
                ];
            }
            if (!empty($items)) {
                //theme the list of blog entries
                // $block['content'] = theme('item_list', ['items'=>$items]);
                $block['content']['list'] = [
                    '#theme' => 'item_list__single_blog',
                    '#items' => $items,
                    '#pre_render' => ['single_blog_item_list_child_render'],
                ];

                //add a link to the full list of blog entries
                $block['content']['more'] = [
                    '#theme' => 'more_link',
                    '#url' => 'blog',
                    '#title' => t('Read the latest blog entries.'),
                ];

                //add a css file to style the block
                $block['content']['#attached']['css'][] = drupal_get_path('module', 'single_blog') . '/single_blog.css';
            }
        }
    }

    return $block;
}

/**
 * Render the child elements of theme_item_list() before its
 * data is themed.
 */
function single_blog_item_list_child_render($elements)
{
    foreach (array_keys($elements['#items']) as $key) {
        //take the reanderable array that we set in
        //single_blog_block_view() and render it into the string
        //that theme_item_list() expects

        if (is_array($elements['#items'][$key]['data'])) {
            $elements['#items'][$key]['data'] = drupal_render($elements['#items'][$key]['data']);
        }
    }

    return $elements;
}

/**
 * Implements hook_theme().
 */
function single_blog_theme($existing, $type, $theme, $path)
{
    return [
        'single_blog_block_item' => [
            'variables' => [
                'node' => NULL,
            ],
            'template' => 'single-blog-block-item',
        ],
    ];
}

/**
 * preprocesses single blog block item variables
 */
function template_preprocess_single_blog_block_item(&$variables)
{
    $node = $variables['node'];

    //create a renderable array for the title
    $variables['title'] = [
        '#type' => 'link',
        '#title' => $node->title,
        '#href' => 'node/' . $node->nid,
    ];

    //foramt the creation of the node.
    $variables['created'] = $node->created;
    $variables['date'] = format_date($node->created, 'custom', SINGLE_BLOG_DATE_FORMAT);

    //load the account object with the node's creator and store
    $variables['user'] = user_load($node->uid);

    //theme the uesrname.
    $variables['name'] = theme('username', [
        'account' => $variables['user'],
    ]);
}
