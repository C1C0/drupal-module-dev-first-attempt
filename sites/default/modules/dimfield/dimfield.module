<?php

/**
 * Implements hook_field_info()
 * This is how drupal knows about new field type
 */

function dimfield_field_info()
{
  return [
    'dimensions' => [
      'label' => t('Dimensions'),
      'description' => t('This field stores h/w/d.'),
      //config options for the field
      //fixed settings
      //cannot be changed
      //used only if changing the setting would affect how data gets saved
      'settings' => ['num_dimensions' => 2],
      //can be changed after creation
      'instance_settings' => [
        'max_height' => 0,
        'max_width' => 0,
        'max_depth' => 0,
      ],
      //specify, what widget and formatter Drupal should use for a given field
      //before the user specifies one
      'default_widget' => 'dimfield_combined',
      'default_formatter' => 'dimfield_default',
    ],
  ];
}

function dimfield_field_schema($field)
{
  //not always saved in SQL db
  //bot mostly it's
  if ($field['type'] == 'dimensions') {
    $schema['columns']['height'] = [
      'type' => 'int',
      'not null' => FALSE,
    ];

    $schema['columns']['width'] = [
      'type' => 'int',
      'not null' => FALSE,
    ];

    $schema['indexes'] = [
      'height' => ['height'],
      'width' => ['width'],
    ];

    if ($field['settings']['num_dimensions'] == 3) {
      $schema['columns']['depth'] = [
        'type' => 'int',
        'not null' => FALSE,
      ];
      $schema['indexes']['depth'] = ['depth'];
    }

    $schema['columns']['units'] = [
      'type' => 'varchar',
      'length' => 10,
      'not null' => FALSE,
    ];
  }

  return $schema;
}

function dimfield_field_is_empty($item, $field)
{
  if ($field['type'] == 'dimensions') {
    if (
      empty($item['height']) &&
      empty($item['width']) &&
      $field['settings']['num_dimensions'] == 2 ||
      empty($item['depth'])
    ) {
      return TRUE;
    }
  }
  return FALSE;
}

function dimfield_field_settings_form($field, $instance, $has_data)
{
  if ($field['type'] == 'dimensions') {
    $settings = $field['settings'];
    $form['num_dimensions'] = [
      '#type' => 'select',
      '#title' => t('How many dimensions'),
      '#options' => [
        2 => t('Height and width'),
        3 => t('height, width, and Depth'),
      ],
      '#default_value' => $settings['num_dimensions'],
      '#required' => FALSE,
      '#description' => t('Is this for a 2-dimensional or 3 dimensional object ?'),
    ];
    return $form;
  }
}

//validation
function dimfield_field_validate(
  $obj_type,
  $object,
  $field,
  $instance,
  $langcode,
  &$items,
  &$errors
) {
  if ($field['type'] == 'dimensions') {
    $columns = [
      'height' => 'max_height',
      'width' => 'max_width',
    ];

    if ($field['settings']['num_dimensions'] === 3) {
      $columns['depth'] = 'max_depth';
    }

    foreach ($items as $delta => $item) {
      foreach ($columns as $column => $max_key) {
        if (
          $instance['settings'][$max_key] &&
          !empty($item[$column]) &&
          $item[$column] > $instance['settings'][$max_key]
        ) {
          $errors[$field]['field_name'][$delta][] = [
            'error' => 'dimfield_' . $max_key,
            'message' => t(
              '%name: The %column may not be larger than %max.',
              [
                '%column' => $column,
                '%name' => $instance['label'],
                '%max' => $instance['settings'][$max_key],
              ],
            )
          ];
        }
      }
    }
  }
}

/**
 * hook_field_widget_info()
 */
function dimfield_field_widget_info()
{
  return [
    'dimfield_simple' => [
      'label' => t('Separate text fields'),
      'description' => t('Allow the user to enter each dimension separately'),
      'field types' => ['dimensions'],
      'behaviors' => [
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ],
    ],
    'dimfield_combined' => [
      'lable' => t('Combined text field'),
      'description' => t('Allow the user to enter all dimensions together.'),
      'field types' => ['dimensions'],
      'settings' => ['size' => 10],
      'behaviors' => [
        'mulptiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default values' => FIELD_BEHAVIOR_DEFAULT,
      ],
    ],
  ];
}

function dimfield_field_widget_form(
  &$form,
  &$form_state,
  $field,
  $instance,
  $langcode,
  $items,
  $delta,
  $element
) {
  $base = $element;

  if ($instance['widget']['type'] == 'dimfield_simple') {
    $element['height'] = [
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => isset($items[$delta]['height']) ?
        $items[$delta]['height'] : NULL,

    ] + $base;

    $element['width'] = [
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => isset($items[$delta]['width']) ?
        $items[$delta]['width'] : NULL,
    ] + $base;

    if ($field['settings']['num_dimensions'] == 3) {
      $element['depth'] = [
        '#type' => 'textfield',
        '#title' => t('Depth'),
        '#default_value' => isset($items[$delta]['depth']) ?
          $items[$delta]['depth'] : NULL,
      ] + $base;
    }

    $element['units'] = [
      '#type' => 'textfield',
      '#title' => t('Units'),
      '#default_value' => isset($items[$delta]['units']) ?
        $items[$delta]['units'] : NULL,
      '#options' => dimfield_units(),
    ];
  } elseif ($instance['widget']['type'] == 'dimfield_combined') {
    $element['#element_validate'] = ['_dimfield_combined_validate'];

    $default = NULL;

    if (isset($itesm[$delta])) {
      $item = $items[$delta];
      if (isset($item['height'], $item['width'])) {
        $default = $item['height'] . 'x' . $item['width'];
        if ($field['settings']['num_dimensions'] == 3) {
          $default .= 'x' . $item['depth'];
        }
      }

      $element['dimfield_combined_wrapper']['#theme'] = 'dimfield_combined_wrapper';
      $element['dimfield_combined_wrapper']['#attached']['css'][] =
        drupal_get_path('module', 'dimfield') . '/dimfield-admin.css';

      $element['dimfield_combined_wrapper']['height_width_depth'] =
        [
          '#type' => 'textfield',
          '#default_value' => $default,
          '#size' => $instance['widget']['settings']['size'],
        ] + $base;
      $element['dimfield_combined_wrapper']['units'] = [
        '#type' => 'select',
        '#title' => t('Units'),
        '#default_value' => isset($items[$delta]['units']) ?
          $items[$delta]['units'] : NULL,
        '#options' => dimfield_units(),
      ];
    }
  }

  return $element;
}

//custom validation
function _dimfield_combined_validate($element, &$form_state)
{
  // This function is also called when submitting the field
  // configuration form. If so, skip validation as it
  // won't work anyway.

  if ($form_state['complete form']['#form_id'] == 'field_ui_field_edit_form') {
    return;
  }

  $values = $form_state['values'];
  $language = $values['language'];
  $field_name = $element['#field_name'];

  $num_dimensions = 2;

  if (array_search('depth', $element['#columns'])) {
    $num_dimensions = 3;
  }

  foreach ($values[$field_name][$language] as $delta => $item) {
    if (substr_count($item['dimfield_combined_wrapper']['height_width_depth'], 'x') == $num_dimensions - 1) {
      if ($num_dimensions == 2) {
        list($height, $width) = explode('x', $item['dimfield_combined_wrapper']['height_width_depth']);

        $new_values = [
          'height' => trim($height),
          'width' => trim($width),
          'units' => $item['dinfield_combined_wrapper']['units'],
        ];
      } elseif ($num_dimensions == 3) {
        list($height, $width, $depth) = explode(
          'x',
          $item['dimfield_combined_wrapper']['height_width_depth']
        );
        $new_values = array(
          'height' => trim($height),
          'width' => trim($width),
          'depth' => trim($depth),
          'units' => $item['dimfield_combined_wrapper']['units'],
        );
      }

      form_set_value($element, $new_values, $form_state);
    } else {
      form_set_error($field_name, t('You must specify all dimensions separated by an \'x\' .'));
    }
  }
}

function dimfield_units($unit = NULL)
{
  static $units;

  if (empty($units)) {
    $units = [
      'inches' => t('Inches'),
      'feet' => t('Feet'),
      'meters' => t('Meters'),
    ];
  }

  if ($unit) {
    return isset($units[$unit]) ? $units[$unit] : '';
  }

  return $units;
}

//settings callback
function dimfield_field_widget_settings_form($field, $instance)
{
  $form = [];

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'dimfield_combined') {
    $form['size'] = [
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#required' => TRUE,
      '#element_validate' => ['_element_validate_integer_positive'],
    ];
  }

  return $form;
}

/**
 * Implements hook_theme()
 */
function dimfield_theme()
{
  return [
    'dimfield_combined_wrapper' => [
      'render element' => 'element',
    ],
  ];
}

function theme_dimfield_combined_wrapper($variables)
{
  $element = $variables['element'];

  $hwd = drupal_render($element['height_width_depth']);
  $units = drupal_render($element['units']);

  return <<<END
  <div class="clearfix">
  <div class="dimfield-combined">{$hwd}</div>
  <div class="dimfield-units">{$units}</div>
  </div>
  END;
}

/**
 * implements hook_formatter_info
 */
function dimfield_field_formatter_info()
{
  return [
    'dimfield_default' => [
      'label' => t('Default'),
      'field types' => ['dimensions'],
    ],
    'dimfield_table' => [
      'lable' => t('Show as table'),
      'field types' => ['dimensions'],
      'settings' => ['units_as' => 'column'],
    ],
  ];
}

/**
 * Implements hook_field_formatter_view()
 */
function dimfield_field_formatter_view(
  $obj_type,
  $object,
  $field,
  $instnce,
  $langcode,
  $items,
  $display
) {
  $element = [];

  $settings = $display['settings'];

  switch ($display['type']) {
    case 'dimfield_default':
      foreach ($items as $delta => $items) {
        if ($field['settings']['num_dimensions'] == 2) {
          $output = t(
            '@height @unit by @width @unit',
            [
              '@height' => $items['height'],
              '@width' => $items['width'],
              '@unit' => dimfield_units($items['units']),
            ]
          );
        } elseif ($field['settings']['num_dimensions'] == 3) {
          $output = t(
            '@height @unit by @width @unit by @depth @unit',
            [
              '@height' => $items['height'],
              '@width' => $items['width'],
              '@depth' => $items['width'],
              '@unit' => dimfield_units($items['units']),
            ]
          );
        }
        $element[$delta] = ['#markup' => $output];
      }
      break;
    case 'dimfield_table':
      $rows = array();
      foreach ($items as $delta => $item) {
        $row = array();
        if ($settings['units_as'] == 'cell') {
          $row[] = t('@value (%units)', array(
            '@value' => $item['height'],
            '%units' => dimfield_units($item['units']),
          ));
          $row[] = t('@value (%units)', array(
            '@value' => $item['width'],
            '%units' => dimfield_units($item['units']),
          ));
        } else {
          $row[] = $item['height'];
          $row[] = $item['width'];
        }
        if ($field['settings']['num_dimensions'] == 3) {
          if ($settings['units_as'] == 'cell') {
            $row[] = t('@value (%units)', array(
              '@value' => $item['depth'],
              '%units' => dimfield_units($item['units']),
            ));
          } else {
            $row[] = $item['depth'];
          }
        }
        if ($settings['units_as'] == 'column') {
          $row[] = dimfield_units($item['units']);
        }
        $rows[] = $row;
      }
      $header = array(t('Height'), t('Width'));
      if ($field['settings']['num_dimensions'] == 3) {
        $header[] = t('Depth');
      }
      if ($settings['units_as'] == 'column') {
        $header[] = t('Units');
      }
      $element = array(
        '#theme' => 'table',
        '#rows' => $rows,
        '#header' => $header,
      );
      break;
  }

  return $element;
}

//complex declaration of formatter
/**
 * Implements hook_field_formatter_settings_form
 */
function demfield_field_formatter_settings_form(
  $field,
  $instance,
  $view_mode,
  $form,
  &$form_state
) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $form = array();
  if ($display['type'] == 'dimfield_table') {
    $form['units_as'] = array(
      '#title' => t('Show units'),
      '#type' => 'select',
      '#options' => array(
        'column' => t('As their own column'),
        'cell' => t('In each cell'),
        'none' => t('Do not show units'),
      ),
      '#default_value' => $settings['units_as'],
      '#required' => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary()
 */
function dimfield_field_formatter_settings_summary(
  $field,
  $instance,
  $view_mode
) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if ($display['type'] == 'dimfield_table') {
    if ($settings['units_as'] == 'column') {
      $summary = t('Show units as their own column');
    } else if ($settings['units_as'] == 'cell') {
      $summary = t('Show units in each cell');
    } else if ($settings['units_as'] == 'none') {
      $summary = t('Do not show units');
    }
  }
  return $summary;
}
